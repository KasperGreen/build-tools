{"version":3,"sources":["../../../src/tools/lib/fs.js"],"names":["readFile","file","Promise","resolve","reject","err","data","writeFile","contents","renameFile","source","target","rename","copyFile","cbCalled","done","rd","createReadStream","on","wr","createWriteStream","pipe","readDir","pattern","options","result","makeDir","name","moveDir","dirs","cwd","nosort","dot","all","map","dir","from","to","dirname","copyDir","cleanDir","glob"],"mappings":"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","file":"fs.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport glob from 'glob';\nimport mkdirp from 'mkdirp';\nimport rimraf from 'rimraf';\n\nexport const readFile = file => new Promise((resolve, reject) => {\n  fs.readFile(file, 'utf8', (err, data) => (err ? reject(err) : resolve(data)));\n});\n\nexport const writeFile = (file, contents) => new Promise((resolve, reject) => {\n  fs.writeFile(file, contents, 'utf8', err => (err ? reject(err) : resolve()));\n});\n\nexport const renameFile = (source, target) => new Promise((resolve, reject) => {\n  fs.rename(source, target, err => (err ? reject(err) : resolve()));\n});\n\nexport const copyFile = (source, target) => new Promise((resolve, reject) => {\n  let cbCalled = false;\n  function done(err) {\n    if (!cbCalled) {\n      cbCalled = true;\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    }\n  }\n\n  const rd = fs.createReadStream(source);\n  rd.on('error', err => done(err));\n  const wr = fs.createWriteStream(target);\n  wr.on('error', err => done(err));\n  wr.on('close', err => done(err));\n  rd.pipe(wr);\n});\n\nexport const readDir = (pattern, options) => new Promise((resolve, reject) =>\n  glob(pattern, options, (err, result) => (err ? reject(err) : resolve(result))),\n);\n\nexport const makeDir = name => new Promise((resolve, reject) => {\n  mkdirp(name, err => (err ? reject(err) : resolve()));\n});\n\nexport const moveDir = async (source, target) => {\n  const dirs = await readDir('**/*.*', {\n    cwd: source,\n    nosort: true,\n    dot: true,\n  });\n  await Promise.all(dirs.map(async (dir) => {\n    const from = path.resolve(source, dir);\n    const to = path.resolve(target, dir);\n    await makeDir(path.dirname(to));\n    await renameFile(from, to);\n  }));\n};\n\nexport const copyDir = async (source, target) => {\n  const dirs = await readDir('**/*.*', {\n    cwd: source,\n    nosort: true,\n    dot: true,\n  });\n\n  await Promise.all(dirs.map(async (dir) => {\n    const from = path.resolve(source, dir);\n    const to = path.resolve(target, dir);\n    await makeDir(path.dirname(to));\n    await copyFile(from, to);\n  }));\n};\n\nexport const cleanDir = (pattern, options) => new Promise((resolve, reject) =>\n  rimraf(pattern, { glob: options }, (err, result) => (err ? reject(err) : resolve(result))),\n);\n\nexport default {\n  readFile,\n  writeFile,\n  renameFile,\n  copyFile,\n  readDir,\n  makeDir,\n  copyDir,\n  moveDir,\n  cleanDir,\n};\n"]}