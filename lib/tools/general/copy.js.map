{"version":3,"sources":["../../../src/tools/general/copy.js"],"names":["resolve","JSON","stringify","private","engines","dependencies","scripts","start","port","host","serverWasRunDetectString","proxy","Object","keys","map","key","route","target","copy"],"mappings":";;;;;;;8BAeA,aAAuB;AACtB,uCAAkB;AACjB,SAAM,iDAAN;AACA,SAAM,mBAAU,eAAKA,OAAL,kCAA2B,cAA3B,CAAV,EAAsDC,KAAKC,SAAL,CAAe;AAC1EC,aAAS,IADiE;AAE1EC,uCAF0E;AAG1EC,iDAH0E;AAI1EC,aAAS;AACRC,YAAO;AADC;AAJiE,IAAf,EAOzD,IAPyD,EAOnD,CAPmD,CAAtD,CAAN;AAQA,SAAM,mBAAU,eAAKP,OAAL,kCAA2B,aAA3B,CAAV,EAAqDC,KAAKC,SAAL,CAAe;AACzEM,iCADyE;AAEzEC,iCAFyE;AAGzEC,yEAHyE;AAIzEC,WAAOC,OAAOC,IAAP,2BAAmBC,GAAnB,CAAuB,UAACC,GAAD,EAAS;AACrC,YAAO;AACNC,aAAOD,GADD;AAENE,cAAQ,yBAAMF,GAAN;AAFF,MAAP;AAID,KALM;AAJkE,IAAf,EAUxD,IAVwD,EAUlD,CAVkD,CAArD,CAAN;AAWA,SAAM,iBAAQ,eAAKf,OAAL,6BAAuB,MAAD,gCAAoB,EAA1C,CAAR,EAAsD,eAAKA,OAAL,mEAAtD,CAAN;AACA,GAtBD,MAsBO;AACN,SAAM,iBAAQ,eAAKA,OAAL,6BAAuB,MAAD,gCAAoB,EAA1C,CAAR,EAAsD,eAAKA,OAAL,iCAAtD,CAAN;AACA;AACD,E;;iBA1BckB,I;;;;;AAff;;;;AACA;;AACA;;;;;;kBAyCeA,I","file":"copy.js","sourcesContent":["import path from 'path'\nimport { makeDir, copyDir, writeFile } from '../lib/fs'\nimport {\n\tisIsomorphic,\n\toutputServer,\n\tcontext,\n\tdependencies,\n\tengines,\n\tpublicDirName,\n\tport,\n\thost,\n\tserverWasRunDetectString,\n\tproxy,\n} from '../../configs/prepare.build-tools.config'\n\nasync function copy () {\n\tif (isIsomorphic) {\n\t\tawait makeDir(outputServer)\n\t\tawait writeFile(path.resolve(outputServer, 'package.json'), JSON.stringify({\n\t\t\tprivate: true,\n\t\t\tengines,\n\t\t\tdependencies,\n\t\t\tscripts: {\n\t\t\t\tstart: 'node server.js',\n\t\t\t},\n\t\t}, null, 2))\n\t\tawait writeFile(path.resolve(outputServer, 'config.json'), JSON.stringify({\n\t\t\tport,\n\t\t\thost,\n\t\t\tserverWasRunDetectString,\n\t\t\tproxy: Object.keys(proxy).map((key) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\troute: key,\n\t\t\t\t\t\ttarget: proxy[key]\n\t\t\t\t\t}\n\t\t\t})\n\t\t}, null, 2))\n\t\tawait copyDir(path.resolve(context, `../${publicDirName}`), path.resolve(outputServer, publicDirName))\n\t} else {\n\t\tawait copyDir(path.resolve(context, `../${publicDirName}`), path.resolve(outputServer))\n\t}\n}\n\nexport default copy"]}