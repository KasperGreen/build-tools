{"version":3,"sources":["../../../src/configs/utils/runServer.js"],"names":["server","pending","serverPath","join","turnOff","kill","runServer","host","existsSync","message","bold","cyan","console","log","yellow","Promise","resolve","onStdOut","data","time","Date","toTimeString","wasRun","toString","indexOf","process","stdout","write","replace","removeListener","on","x","spawn","env","Object","assign","NODE_ENV","once","code","signal","Error","stderr","red","reject"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAEA,IAAIA,MAAJ;AACA,IAAIC,UAAU,IAAd;AACA,MAAMC,aAAa,eAAKC,IAAL,iEAAnB;;AAEA,SAASC,OAAT,GAAoB;AACnB,KAAIJ,MAAJ,EAAY;AACXA,SAAOK,IAAP,CAAY,SAAZ;AACA;AACD;;AAED,SAASC,SAAT,CAAoBC,IAApB,EAA0B;AACzB,sCAAkB;AACjB,MAAI,CAAC,aAAGC,UAAH,CAAcN,UAAd,CAAL,EAAgC;AAC/B,SAAMO,UAAW;yCACqB,gBAAMC,IAAN,CAAWC,IAAX,CAAgBT,UAAhB,CAA4B;GADlE;;AAIAU,WAAQC,GAAR,CAAY,gBAAMH,IAAN,CAAWI,MAAX,CAAkBL,OAAlB,CAAZ;;AAEA,UAAOM,QAAQC,OAAR,CAAgBP,OAAhB,CAAP;AACA;;AAED,SAAO,IAAIM,OAAJ,CAAaC,OAAD,IAAa;AAC/B,YAASC,QAAT,CAAmBC,IAAnB,EAAyB;AACxB,UAAMC,OAAO,IAAIC,IAAJ,GAAWC,YAAX,EAAb;AACA,UAAMC,SAASJ,KAAKK,QAAL,CAAc,MAAd,EAAsBC,OAAtB,mDAA4D,CAAC,CAA5E;;AAEAC,YAAQC,MAAR,CAAeC,KAAf,CAAqBR,KAAKS,OAAL,CAAa,yBAAb,EAAwC,OAAxC,CAArB;AACAH,YAAQC,MAAR,CAAeC,KAAf,CAAqBT,IAArB;;AAEA,QAAII,MAAJ,EAAY;AACXtB,YAAOO,IAAP,GAAcA,IAAd;AACAP,YAAO0B,MAAP,CAAcG,cAAd,CAA6B,MAA7B,EAAqCZ,QAArC;AACAjB,YAAO0B,MAAP,CAAcI,EAAd,CAAiB,MAAjB,EAAyBC,KAAKN,QAAQC,MAAR,CAAeC,KAAf,CAAqBI,CAArB,CAA9B;AACA9B,eAAU,KAAV;AACAe,aAAQhB,MAAR;AACA;AACD;;AAEDI;;AAEAJ,YAAS,wBAAGgC,KAAH,CAAS,MAAT,EAAiB,CAAC9B,UAAD,CAAjB,EAA+B;AACvC+B,SAAKC,OAAOC,MAAP,CAAc,EAACC,UAAU,aAAX,EAAd,EAAyCX,QAAQQ,GAAjD;AADkC,IAA/B,CAAT;;AAIA,OAAIhC,OAAJ,EAAa;AACZD,WAAOqC,IAAP,CAAY,MAAZ,EAAoB,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACrC,SAAItC,OAAJ,EAAa;AACZ,YAAM,IAAIuC,KAAJ,CAAW,6CAA4CF,IAAK,YAAWC,MAAO,EAA9E,CAAN;AACA;AACD,KAJD;AAKA;;AAEDvC,UAAO0B,MAAP,CAAcI,EAAd,CAAiB,MAAjB,EAAyBb,QAAzB;AACAjB,UAAOyC,MAAP,CAAcX,EAAd,CAAiB,MAAjB,EAAyBC,KAAKN,QAAQgB,MAAR,CAAed,KAAf,CAAqBI,CAArB,CAA9B;;AAEA,UAAO/B,MAAP;AACA,GAnCM,CAAP;AAoCA,EA/CD,MA+CO;AACN,QAAMS,UAAW;8CAC2B,gBAAMC,IAAN,CAAWC,IAAX,CAAgBT,UAAhB,CAA4B;GADxE;;AAIAU,UAAQC,GAAR,CAAY,gBAAMH,IAAN,CAAWgC,GAAX,CAAejC,OAAf,CAAZ;;AAEA,SAAOM,QAAQ4B,MAAR,CAAelC,OAAf,CAAP;AACA;AACD;;AAEDgB,QAAQK,EAAR,CAAW,MAAX,EAAmB1B,OAAnB;;kBAEeE,S","file":"runServer.js","sourcesContent":["import path from 'path'\nimport fs from 'fs'\nimport cp from 'child_process'\nimport chalk from 'chalk'\nimport { entryServer, outputServer, isIsomorphic } from '../prepare.build-tools.config'\nimport { serverWasRunDetectString } from '../../configs/prepare.build-tools.config'\n\nlet server\nlet pending = true\nconst serverPath = path.join(outputServer, entryServer)\n\nfunction turnOff () {\n\tif (server) {\n\t\tserver.kill('SIGTERM')\n\t}\n}\n\nfunction runServer (host) {\n\tif (isIsomorphic) {\n\t\tif (!fs.existsSync(serverPath)) {\n\t\t\tconst message = `\n\t\t!!! [WANTED][SERVER_FILE][NOT_FOUNT][${chalk.bold.cyan(serverPath)}] !!!\n\t\t`\n\n\t\t\tconsole.log(chalk.bold.yellow(message))\n\n\t\t\treturn Promise.resolve(message)\n\t\t}\n\n\t\treturn new Promise((resolve) => {\n\t\t\tfunction onStdOut (data) {\n\t\t\t\tconst time = new Date().toTimeString()\n\t\t\t\tconst wasRun = data.toString('utf8').indexOf(serverWasRunDetectString) !== -1\n\n\t\t\t\tprocess.stdout.write(time.replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, '[$1] '))\n\t\t\t\tprocess.stdout.write(data)\n\n\t\t\t\tif (wasRun) {\n\t\t\t\t\tserver.host = host\n\t\t\t\t\tserver.stdout.removeListener('data', onStdOut)\n\t\t\t\t\tserver.stdout.on('data', x => process.stdout.write(x))\n\t\t\t\t\tpending = false\n\t\t\t\t\tresolve(server)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tturnOff()\n\n\t\t\tserver = cp.spawn('node', [serverPath], {\n\t\t\t\tenv: Object.assign({NODE_ENV: 'development'}, process.env)\n\t\t\t})\n\n\t\t\tif (pending) {\n\t\t\t\tserver.once('exit', (code, signal) => {\n\t\t\t\t\tif (pending) {\n\t\t\t\t\t\tthrow new Error(`Server terminated unexpectedly with code: ${code} signal: ${signal}`)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tserver.stdout.on('data', onStdOut)\n\t\t\tserver.stderr.on('data', x => process.stderr.write(x))\n\n\t\t\treturn server\n\t\t})\n\t} else {\n\t\tconst message = `\n\t\t!!! [WANTED][TRY][RUN_SERVER_IN_SPA_MODE][${chalk.bold.cyan(serverPath)}] !!!\n\t\t`\n\n\t\tconsole.log(chalk.bold.red(message))\n\n\t\treturn Promise.reject(message)\n\t}\n}\n\nprocess.on('exit', turnOff)\n\nexport default runServer"]}