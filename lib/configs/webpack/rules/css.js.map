{"version":3,"sources":["../../../../src/configs/webpack/rules/css.js"],"names":["use","isExternal","styleLoader","loader","options","importLoaders","localIdentName","modules","sourceMap","minimize","discardComments","removeAll","plugins","rules","extract","fallback","publicPath","internalCSS","test","include","externalCSS","exclude"],"mappings":";;;;;;;;;AAAA;;AASA;;;;;;AAEA,MAAMA,MAAM,CAACC,aAAa,KAAd,KAAwB;AACnC,KAAIC,cAAc,EAAlB;;AAEA,uCAAmB;AAClB,uCAAkB;AACjB,qCAAe;AACd;;AAEAA,kBAAc,EAAd;AACA,IAJD,MAIO;AACNA,kBAAc,CACb;AACCC,aAAQ;AADT,KADa,CAAd;AAKA;AACD,GAZD,MAYO;AACND,iBAAc,CACb;AACCC,YAAQ;AADT,IADa,CAAd;AAKA;AACD,EApBD,MAoBO,qCAAkB;AACxB,oCAAe;AACd;;AAEAD,iBAAc,EAAd;AACA,GAJD,MAIO;AACNA,iBAAc,CACb;AACCC,YAAQ;AADT,IADa,CAAd;AAKA;AACD;;AAED,QAAO,CACN,GAAGD,WADG,EAEN;AACCC,UAAQ,YADT;AAECC,wBACI,CAACH,UAAD,GAAc;AAChB;AACAI,kBAAe,CAFC;AAGhBC,mBAAgB,mCAAgB,gCAAhB,GAAmD;AAHnD,GAAd,GAIC,EALL;AAMC;AACAC,YAAS,CAACN,UAPX;AAQCO,8CARD;AASC;AACAC,4CAVD;AAWCC,oBAAiB;AAChBC,eAAW;AADK;AAXlB;AAFD,EAFM,EAoBN,IAAG,CAACV,UAAD,GAAc,CAChB;AACCE,UAAQ,gBADT;AAECC,WAAS;AACRQ;AADQ;AAFV,EADgB,CAAd,GAOC,EAPJ,CApBM,CAAP;AA6BA,CAlED;;AAoEA,MAAMC,QAAQ,CAACZ,aAAa,KAAd,kBACV,sEAAgC;AAClCD,MAAK,mCAAkBc,OAAlB,CAA0B;AAC9BC,YAAU,cADoB;AAE9Bf,OAAKA,IAAIC,UAAJ,CAFyB;AAG9Be,cAAY,0BAAOA;AAHW,EAA1B;AAD6B,CAAhC,GAMC;AACHhB,MAAKA,IAAIC,UAAJ;AADF,CAPS,CAAd;;AAYO,MAAMgB,oCAAc,CAACC,OAAO,OAAR;AAC1BA,KAD0B;AAE1BC;AAF0B,GAGvBN,MAAM,KAAN,CAHuB,CAApB;;AAMA,MAAMO,oCAAc,CAACF,OAAO,OAAR;AAC1BA,KAD0B;AAE1BG;AAF0B,GAGvBR,MAAM,IAAN,CAHuB,CAApB","file":"css.js","sourcesContent":["import {\n\tcontext,\n\tisDevelopment,\n\tisProduction,\n\tisIsomorphic,\n\toutput,\n\tpostCssConfig,\n\tisInferno\n} from '../../prepare.build-tools.config'\nimport ExtractTextPlugin from 'extract-text-webpack-plugin'\n\nconst use = (isExternal = false) => {\n\tlet styleLoader = []\n\n\tif (isDevelopment) {\n\t\tif (isIsomorphic) {\n\t\t\tif (isInferno) {\n\t\t\t\t// TODO isomorphic-style-loader - не подходит так как требует наличие контекста.\n\n\t\t\t\tstyleLoader = []\n\t\t\t} else {\n\t\t\t\tstyleLoader = [\n\t\t\t\t\t{\n\t\t\t\t\t\tloader: 'isomorphic-style-loader'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t} else {\n\t\t\tstyleLoader = [\n\t\t\t\t{\n\t\t\t\t\tloader: 'style-loader'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t} else if (isIsomorphic) {\n\t\tif (isInferno) {\n\t\t\t// TODO isomorphic-style-loader - не подходит так как требует наличие контекста.\n\n\t\t\tstyleLoader = []\n\t\t} else {\n\t\t\tstyleLoader = [\n\t\t\t\t{\n\t\t\t\t\tloader: 'isomorphic-style-loader'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n\n\treturn [\n\t\t...styleLoader,\n\t\t{\n\t\t\tloader: 'css-loader',\n\t\t\toptions: {\n\t\t\t\t...!isExternal ? {\n\t\t\t\t\t// CSS Loader https://webpack.js.org/loaders/css-loader/\n\t\t\t\t\timportLoaders: 1,\n\t\t\t\t\tlocalIdentName: isDevelopment ? '[name]-[local]-[hash:base64:5]' : '[hash:base64:32]',\n\t\t\t\t} : {},\n\t\t\t\t// CSS Modules https://github.com/css-modules/css-modules\n\t\t\t\tmodules: !isExternal,\n\t\t\t\tsourceMap: isDevelopment,\n\t\t\t\t// CSS Nano http://cssnano.co/options/\n\t\t\t\tminimize: isProduction,\n\t\t\t\tdiscardComments: {\n\t\t\t\t\tremoveAll: true\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t...!isExternal ? [\n\t\t\t{\n\t\t\t\tloader: 'postcss-loader',\n\t\t\t\toptions: {\n\t\t\t\t\tplugins: postCssConfig\n\t\t\t\t},\n\t\t\t}\n\t\t] : []\n\t]\n}\n\nconst rules = (isExternal = false) => ({\n\t...!isIsomorphic && isProduction ? {\n\t\tuse: ExtractTextPlugin.extract({\n\t\t\tfallback: 'style-loader',\n\t\t\tuse: use(isExternal),\n\t\t\tpublicPath: output.publicPath\n\t\t})\n\t} : {\n\t\tuse: use(isExternal)\n\t},\n})\n\nexport const internalCSS = (test = /\\.css/) => ({\n\ttest,\n\tinclude: context,\n\t...rules(false)\n})\n\nexport const externalCSS = (test = /\\.css/) => ({\n\ttest,\n\texclude: context,\n\t...rules(true)\n})"]}