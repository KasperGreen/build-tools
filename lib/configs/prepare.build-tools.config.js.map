{"version":3,"sources":["../../src/configs/prepare.build-tools.config.js"],"names":["CWD","process","cwd","getProjectAbsPath","relPath","resolve","config","additionalModules","modules","map","isDevelopment","env","NODE_ENV","isProduction","isDebug","WEBPACK_DEBUG","isVerbose","BUILD_TOOLS_VERBOSE","isAnalyze","BUILD_TOOLS_ANALYZE","isMobx","ENABLED_MOBX_TOOLS","isIsomorphic","ENABLED_ISOMORPHIC","isRelay","ENABLED_RELAY","isBrovserSync","ENABLED_BROWSER_SYNC","isInferno","INFERNOJS_SPA","isTS","ENABLED_TYPE_SCRIPT","isRHL","ENABLED_RHL","filename","chunkFilename","_publicDirName","isomorphic","publicDirName","outputPublicPath","output","path","outputProtectPath","context","entry","publicPath","pathinfo","stats","colors","timings","maxModules","reasons","hash","version","chunks","chunkModules","cached","cachedAssets","devServer","contentBase","browserslist","proxy","host","socket","port","protocol","DEBUG","__DEV__","__PROD__","__RHL__","babelEnvSpa","targets","browsers","useBuiltIns","debug","entryServer","outputServer","filenameServer","babelEnvServer","node","nodeVersion","dependencies","engines","serverWasRunDetectString","postCssPluginsFile","css","postCssPlugins","existsSync","require","isolation","reset","Array","isArray","postCssConfig","__dirname"],"mappings":"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","file":"prepare.build-tools.config.js","sourcesContent":["'use strict'\n\nimport path from 'path'\nimport fs from 'fs'\nimport getConfig from './utils/getConfig'\n\nconst CWD = process.cwd()\nconst getProjectAbsPath = (relPath) => {\n\tif (relPath) {\n\t\treturn path.resolve(CWD, relPath)\n\t}\n\n\treturn ''\n}\nconst config = getConfig()\n//console.log(JSON.stringify(config, null, 2))\nconst additionalModules = config.modules.map(relPath => getProjectAbsPath(relPath))\n\nexport const isDevelopment = process.env.NODE_ENV === 'development'\nexport const isProduction = process.env.NODE_ENV === 'production'\nexport const isDebug = process.env.WEBPACK_DEBUG === 'true'\nexport const isVerbose = process.env.BUILD_TOOLS_VERBOSE === 'true'\nexport const isAnalyze = process.env.BUILD_TOOLS_ANALYZE === 'true'\nexport const isMobx = process.env.ENABLED_MOBX_TOOLS === 'true'\nexport const isIsomorphic = process.env.ENABLED_ISOMORPHIC === 'true'\nexport const isRelay = process.env.ENABLED_RELAY === 'true'\nexport const isBrovserSync = process.env.ENABLED_BROWSER_SYNC === 'true'\nexport const isInferno = process.env.INFERNOJS_SPA === 'true'\nexport const isTS = process.env.ENABLED_TYPE_SCRIPT === 'true'\nexport const isRHL = process.env.ENABLED_RHL === 'true'\n\nconst filename = isDevelopment ? '[name].js?[hash:4]' : '[chunkhash:32].js'\nconst chunkFilename = isDevelopment ? '[name].chunk.js?[hash:4]' : '[chunkhash:32].chunk.js'\nconst _publicDirName = config.isomorphic.publicDirName\nconst outputPublicPath = getProjectAbsPath(\n\tisIsomorphic ? `${config.output.path}/${_publicDirName}` : config.output.path\n)\nconst outputProtectPath = getProjectAbsPath(config.output.path)\n\nexport const context = getProjectAbsPath(config.context)\nexport const entry = config.entry\nexport const output = {\n\tpath: outputPublicPath,\n\tpublicPath: config.output.publicPath,\n\tfilename,\n\tchunkFilename,\n\tpathinfo: isVerbose || isDebug\n}\nexport const modules = ['node_modules', ...additionalModules]\nexport const stats = {\n\tcolors: true,\n\ttimings: true,\n\tcontext,\n\tmodules: isVerbose,\n\tmaxModules: isDebug ? 100000 : 10,\n\treasons: isVerbose,\n\thash: isVerbose,\n\tversion: isVerbose,\n\tchunks: isVerbose,\n\tchunkModules: isVerbose,\n\tcached: isVerbose,\n\tcachedAssets: isVerbose\n}\nexport const devServer = {\n\tpublicPath: output.publicPath,\n\tcontentBase: outputPublicPath,\n\tstats,\n}\nexport const browserslist = config.browserslist\nexport const proxy = config.proxy\nexport const host = config.socket.host\nexport const port = config.socket.port\nexport const protocol = 'http'\nexport const socket = `${protocol}://${host}:${port}`\nexport const env = {\n\tNODE_ENV: isDevelopment ? '\"development\"' : '\"production\"',\n\tDEBUG: isDebug,\n\t__DEV__: isDevelopment,\n\t__PROD__: isProduction,\n\t__RHL__: isRHL\n}\n// A Babel preset that can automatically determine the Babel plugins and polyfills\n// https://github.com/babel/babel-preset-env\nexport const babelEnvSpa = [\n\t'env',\n\t{\n\t\ttargets: {\n\t\t\tbrowsers: browserslist,\n\t\t},\n\t\tmodules: false,\n\t\tuseBuiltIns: false,\n\t\tdebug: isDebug,\n\t}\n]\n\n// For server build in isomorphic mode\nexport const entryServer = config.isomorphic.entry\nexport const publicDirName = _publicDirName\nexport const outputServer = outputProtectPath\nexport const filenameServer = `../${entryServer}`\nexport const babelEnvServer = [\n\t'env',\n\t{\n\t\ttargets: {\n\t\t\tnode: config.nodeVersion,\n\t\t},\n\t\tmodules: false,\n\t\tuseBuiltIns: false,\n\t\tdebug: false,\n\t}\n]\nexport const dependencies = config.dependencies\nexport const engines = config.engines\nexport const serverWasRunDetectString = `The server is running at ${socket}`\n\nconst postCssPluginsFile = getProjectAbsPath(config.css.postCssPlugins)\nconst postCssPlugins = fs.existsSync(postCssPluginsFile) ? require(postCssPluginsFile) : []\n\nexport const css = {\n\tisolation: config.css.isolation,\n\treset: config.css.reset,\n\tpostCssPlugins: Array.isArray(postCssPlugins) ? postCssPlugins : [],\n}\nexport const postCssConfig = require(path.resolve(__dirname, 'postcss.config.js'))"]}